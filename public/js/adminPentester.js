// Get pentester ID from URL parameters
const urlParams = new URLSearchParams(window.location.search);
const pentesterId = urlParams.get('id');

if (!pentesterId) {
    alert('Pentester ID not provided');
    window.location.href = '/';
}

// Filter state management
let currentTestFilter = null;
let currentTargetFilter = null;
let allTargets = [];
let allVulnerabilities = [];

// Load pentester data on page load
document.addEventListener('DOMContentLoaded', function () {
    loadPentesterDetails();
    loadPentesterTests();
    loadPentesterTargets();
    loadPentesterVulnerabilities();
});

// Tab event listeners
document.getElementById('targets-tab').addEventListener('click', function () {
    if (!allTargets.length) {
        loadPentesterTargets();
    } else {
        displayTargets(allTargets);
    }
});

document
    .getElementById('vulnerabilities-tab')
    .addEventListener('click', function () {
        if (!allVulnerabilities.length) {
            loadPentesterVulnerabilities();
        } else {
            displayVulnerabilities(allVulnerabilities);
        }
    });

// Load pentester details
async function loadPentesterDetails() {
    try {
        const response = await fetch(
            `/api/pentester-details?pentester_id=${pentesterId}`,
        );
        const data = await response.json();

        if (data.success) {
            const pentester = data.pentester;
            document.getElementById('pentester-name').textContent =
                pentester.email;
            document.getElementById('pentester-email').textContent =
                pentester.email;
            document.getElementById('pentester-id').textContent = pentester.id;
            document.getElementById('pentester-joined').textContent = new Date(
                pentester.creation_date,
            ).toLocaleDateString();
        } else {
            console.error('Failed to load pentester details:', data.error);
            alert('Failed to load pentester details: ' + data.error);
        }
    } catch (error) {
        console.error('Error loading pentester details:', error);
        alert('Error loading pentester details');
    }
}

// Load pentester tests
async function loadPentesterTests() {
    try {
        const response = await fetch(
            `/api/pentester-tests?pentester_id=${pentesterId}`,
        );
        const data = await response.json();

        if (data.success) {
            const tests = data.tests;
            document.getElementById('total-tests').textContent = tests.length;

            const tbody = document.getElementById('tests-table-body');
            if (tests.length === 0) {
                tbody.innerHTML =
                    '<tr><td colspan="7" class="text-center text-muted">No tests found</td></tr>';
            } else {
                tbody.innerHTML = tests
                    .map(
                        (test) => `
                    <tr>
                        <td>${test.id}</td>
                        <td><a href="#" class="text-decoration-none fw-bold clickable-link" onclick="filterTargetsByTest(${
                            test.id
                        }, '${escapeHtml(
                            test.test_name || 'Untitled',
                        )}')" title="Click to view targets for this test">${escapeHtml(
                            test.test_name || 'Untitled',
                        )}</a></td>
                        <td>${escapeHtml(
                            test.test_description || 'No description',
                        )}</td>
                        <td>${escapeHtml(
                            test.customer_email || 'Unknown customer',
                        )}</td>
                        <td><span class="badge bg-${
                            test.completed ? 'success' : 'warning'
                        }">${
                            test.completed ? 'Completed' : 'In Progress'
                        }</span></td>
                        <td>${
                            test.test_date
                                ? new Date(test.test_date).toLocaleDateString()
                                : 'Not set'
                        }</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary text-white" onclick="editTest(${
                                test.id
                            })">Edit</button>
                        </td>
                    </tr>
                `,
                    )
                    .join('');
            }
        } else {
            console.error('Failed to load tests:', data.error);
        }
    } catch (error) {
        console.error('Error loading tests:', error);
    }
}

// Load pentester targets
async function loadPentesterTargets() {
    try {
        const response = await fetch(
            `/api/pentester-targets?pentester_id=${pentesterId}`,
        );
        const data = await response.json();

        if (data.success) {
            allTargets = data.targets;
            displayTargets(allTargets);
        } else {
            console.error('Failed to load targets:', data.error);
        }
    } catch (error) {
        console.error('Error loading targets:', error);
    }
}

// Display targets with optional filtering
function displayTargets(targets) {
    document.getElementById('total-targets').textContent = targets.length;

    const tbody = document.getElementById('targets-table-body');
    if (targets.length === 0) {
        tbody.innerHTML =
            '<tr><td colspan="6" class="text-center text-muted">No targets found</td></tr>';
    } else {
        tbody.innerHTML = targets
            .map(
                (target) => `
            <tr>
                <td>${target.id}</td>
                <td>${escapeHtml(target.test_name || 'Unknown')}</td>
                <td>${escapeHtml(target.customer_email || 'Unknown')}</td>
                <td><a href="#" class="text-decoration-none fw-bold clickable-link" onclick="filterVulnerabilitiesByTarget(${
                    target.id
                }, '${escapeHtml(
                    target.target_name || 'Untitled',
                )}')" title="Click to view vulnerabilities for this target">${escapeHtml(
                    target.target_name || 'Untitled',
                )}</a></td>
                <td>${escapeHtml(
                    target.target_description || 'No description',
                )}</td>
                <td>
                    <button class="btn btn-sm btn-outline-primary text-white" onclick="editTarget(${
                        target.id
                    })">Edit</button>
                </td>
            </tr>
        `,
            )
            .join('');
    }
}

// Load pentester vulnerabilities
async function loadPentesterVulnerabilities() {
    try {
        const response = await fetch(
            `/api/pentester-vulnerabilities?pentester_id=${pentesterId}`,
        );
        const data = await response.json();

        if (data.success) {
            allVulnerabilities = data.vulnerabilities;
            displayVulnerabilities(allVulnerabilities);
        } else {
            console.error('Failed to load vulnerabilities:', data.error);
        }
    } catch (error) {
        console.error('Error loading vulnerabilities:', error);
    }
}

// Display vulnerabilities with optional filtering
function displayVulnerabilities(vulnerabilities) {
    document.getElementById('total-vulnerabilities').textContent =
        vulnerabilities.length;

    const container = document.getElementById('vulnerabilities-container');
    if (vulnerabilities.length === 0) {
        container.innerHTML =
            '<div class="text-center p-4 text-muted">No vulnerabilities found</div>';
    } else {
        container.innerHTML = vulnerabilities
            .map((vuln) => createVulnerabilityCard(vuln))
            .join('');
    }
}

// Create detailed vulnerability card
function createVulnerabilityCard(vuln) {
    const cvssClass = getCvssClass(vuln.cvss_score);
    const statusClass = vuln.solved ? 'solved' : 'open';

    return `
        <div class="vulnerability-card">
            <div class="vulnerability-header" onclick="toggleVulnerabilityDetails(${
                vuln.id
            })">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h6 class="mb-1 text-primary">
                            <strong>ID: ${vuln.id}</strong> - ${escapeHtml(
        vuln.affected_entity || 'Unknown Entity',
    )}
                        </h6>
                        <small class="text-muted">
                            Target: <strong>${escapeHtml(
                                vuln.target_name || 'Unknown',
                            )}</strong> | 
                            Test: <strong>${escapeHtml(
                                vuln.test_name || 'Unknown',
                            )}</strong> |
                            Customer: <strong>${escapeHtml(
                                vuln.customer_email || 'Unknown',
                            )}</strong>
                        </small>
                    </div>
                    <div class="col-md-4 text-end">
                        <span class="cvss-score cvss-${cvssClass}">${
        vuln.cvss_score || 'N/A'
    }</span>
                        <span class="status-badge status-${statusClass} ms-2">${
        vuln.solved ? 'Solved' : 'Open'
    }</span>
                    </div>
                </div>
                <div class="expand-indicator">
                    <i class="bi bi-chevron-down"></i>
                </div>
            </div>
            
            <div class="vulnerability-body">
                <div class="vulnerability-details" id="vuln-details-${vuln.id}">
                    <!-- Basic Information -->
                    <div class="detail-section">
                        <h6><i class="bi bi-info-circle"></i> Basic Information</h6>
                        <div class="detail-row">
                            <span class="detail-label">Identifier:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.identifier || 'Not specified',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Classification:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.classification || 'Not specified',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Location:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.location || 'Not specified',
                            )}</span>
                        </div>
                    </div>

                    <!-- Risk Assessment -->
                    <div class="detail-section">
                        <h6><i class="bi bi-exclamation-triangle"></i> Risk Assessment</h6>
                        <div class="detail-row">
                            <span class="detail-label">Risk Statement:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.risk_statement || 'Not provided',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">CVSS Score:</span>
                            <span class="detail-value">
                                <span class="cvss-score cvss-${cvssClass}">${
        vuln.cvss_score || 'N/A'
    }</span>
                            </span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">CVSSv3 Vector:</span>
                            <span class="detail-value"><code>${escapeHtml(
                                vuln.cvssv3_code || 'Not provided',
                            )}</code></span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Likelihood:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.likelihood || 'Not assessed',
                            )}</span>
                        </div>
                    </div>

                    <!-- Technical Details -->
                    <div class="detail-section">
                        <h6><i class="bi bi-gear"></i> Technical Details</h6>
                        <div class="detail-row">
                            <span class="detail-label">Affected Component:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.affected_component || 'Not specified',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Description:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.vulnerabilities_description ||
                                    'No description provided',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Reproduction Steps:</span>
                            <span class="detail-value">
                                <pre class="bg-light p-2 rounded" style="white-space: pre-wrap; font-size: 0.9rem;">${escapeHtml(
                                    vuln.reproduction_steps ||
                                        'No reproduction steps provided',
                                )}</pre>
                            </span>
                        </div>
                    </div>

                    <!-- Impact & Controls -->
                    <div class="detail-section">
                        <h6><i class="bi bi-shield-check"></i> Impact & Controls</h6>
                        <div class="detail-row">
                            <span class="detail-label">Impact:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.impact || 'Not assessed',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Identified Controls:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.identified_controls || 'None identified',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Residual Risk:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.residual_risk || 'Not assessed',
                            )}</span>
                        </div>
                    </div>

                    <!-- Remediation -->
                    <div class="detail-section">
                        <h6><i class="bi bi-tools"></i> Remediation</h6>
                        <div class="detail-row">
                            <span class="detail-label">Difficulty:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.remediation_difficulty || 'Not assessed',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Recommendations:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.recommendations ||
                                    'No recommendations provided',
                            )}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Recommended Reading:</span>
                            <span class="detail-value">${escapeHtml(
                                vuln.recommended_reading || 'None provided',
                            )}</span>
                        </div>
                    </div>

                    <!-- Response & Status -->
                    <div class="detail-section">
                        <h6><i class="bi bi-chat-left-text"></i> Response & Status</h6>
                        <div class="detail-row">
                            <span class="detail-label">Response:</span>
                            <span class="detail-value">
                                <div class="bg-light p-2 rounded" style="max-height: 150px; overflow-y: auto;">
                                    ${escapeHtml(
                                        vuln.response || 'No response provided',
                                    )}
                                </div>
                            </span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Status:</span>
                            <span class="detail-value">
                                <span class="status-badge status-${statusClass}">${
        vuln.solved ? 'Solved' : 'Open'
    }</span>
                            </span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Created:</span>
                            <span class="detail-value">${
                                vuln.created_at
                                    ? new Date(vuln.created_at).toLocaleString()
                                    : 'Unknown'
                            }</span>
                        </div>
                    </div>
                </div>
                
                <div class="vuln-actions">
                    <button class="btn btn-sm btn-outline-primary me-2 text-white" onclick="editVulnerability(${
                        vuln.id
                    })">
                        <i class="bi bi-pencil"></i> Edit
                    </button>
                </div>
            </div>
        </div>
    `;
}

// Get CVSS class for styling
function getCvssClass(cvssScore) {
    if (!cvssScore) return 'low';
    const score = parseFloat(cvssScore);
    if (score >= 9.0) return 'critical';
    if (score >= 7.0) return 'high';
    if (score >= 4.0) return 'medium';
    return 'low';
}

// Toggle vulnerability details
function toggleVulnerabilityDetails(vulnId) {
    const details = document.getElementById(`vuln-details-${vulnId}`);
    const indicator = details
        .closest('.vulnerability-card')
        .querySelector('.expand-indicator');

    if (details.classList.contains('show')) {
        details.classList.remove('show');
        indicator.classList.remove('expanded');
    } else {
        details.classList.add('show');
        indicator.classList.add('expanded');
    }
}

// Toggle vulnerability status (placeholder function)
function toggleVulnerabilityStatus(vulnId, newStatus) {
    // This would normally make an API call to update the vulnerability status
    alert(
        `Toggle vulnerability ${vulnId} status to ${
            newStatus ? 'Solved' : 'Open'
        } - API integration needed`,
    );
}

// Filter functions
function filterTargetsByTest(testId, testName) {
    currentTestFilter = testId;
    const filteredTargets = allTargets.filter(
        (target) => target.test_id == testId,
    );

    // Switch to targets tab using Bootstrap API
    const targetsTab = new bootstrap.Tab(
        document.getElementById('targets-tab'),
    );
    targetsTab.show();

    // Update header to show filter status
    setTimeout(() => {
        const targetHeader = document.querySelector('#targets .stats-card h4');
        targetHeader.innerHTML = `Pentester Targets - Filtered by Test: ${testName} <button class="btn btn-sm btn-outline-secondary ms-2 text-white" onclick="clearTargetsFilter()">Clear Filter</button>`;
        displayTargets(filteredTargets);
    }, 100);
}

function filterVulnerabilitiesByTarget(targetId, targetName) {
    currentTargetFilter = targetId;
    const filteredVulnerabilities = allVulnerabilities.filter(
        (vuln) => vuln.target_id == targetId,
    );

    // Switch to vulnerabilities tab using Bootstrap API
    const vulnTab = new bootstrap.Tab(
        document.getElementById('vulnerabilities-tab'),
    );
    vulnTab.show();

    // Update header to show filter status
    setTimeout(() => {
        const vulnHeader = document.querySelector(
            '#vulnerabilities .stats-card h4',
        );
        vulnHeader.innerHTML = `Pentester Vulnerabilities - Filtered by Target: ${targetName} <button class="btn btn-sm btn-outline-secondary ms-2 text-white" onclick="clearVulnerabilitiesFilter()">Clear Filter</button>`;
        displayVulnerabilities(filteredVulnerabilities);
    }, 100);
}

function clearTargetsFilter() {
    currentTestFilter = null;
    const targetHeader = document.querySelector('#targets .stats-card h4');
    targetHeader.innerHTML = 'Pentester Targets';
    displayTargets(allTargets);
}

function clearVulnerabilitiesFilter() {
    currentTargetFilter = null;
    const vulnHeader = document.querySelector(
        '#vulnerabilities .stats-card h4',
    );
    vulnHeader.innerHTML = 'Pentester Vulnerabilities';
    displayVulnerabilities(allVulnerabilities);
}

// Helper functions
function escapeHtml(text) {
    if (text === null || text === undefined || text === '') {
        return '';
    }
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function safeValue(value, defaultText = 'Not provided') {
    if (
        value === null ||
        value === undefined ||
        value === '' ||
        value.trim === ''
    ) {
        return defaultText;
    }
    return escapeHtml(value);
}

function truncateText(text, maxLength) {
    return text.length > maxLength
        ? text.substring(0, maxLength) + '...'
        : text;
}

function getStatusColor(status) {
    const statusColors = {
        completed: 'success',
        'in progress': 'info',
        pending: 'warning',
        cancelled: 'secondary',
        active: 'success',
        inactive: 'secondary',
        vulnerable: 'danger',
        secure: 'success',
        open: 'danger',
        fixed: 'success',
        closed: 'secondary',
    };
    return statusColors[status?.toLowerCase()] || 'secondary';
}

function getSeverityClass(cvssScore) {
    if (!cvssScore) return 'low';
    const score = parseFloat(cvssScore);
    if (score >= 9.0) return 'critical';
    if (score >= 7.0) return 'high';
    if (score >= 4.0) return 'medium';
    return 'low';
}

function deleteUser(pentesterId) {
    if (confirm('Are you sure you want to delete this pentester?')) {
        fetch(`/api/delete?user_id=${pentesterId}`, {
            method: 'DELETE',
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.success) {
                    alert('Pentester deleted successfully');
                    window.location.href = '/';
                } else {
                    alert('Failed to delete pentester: ' + data.error);
                }
            })
            .catch((error) => {
                console.error('Error deleting pentester:', error);
                alert('Error deleting pentester');
            });
    }
}   
