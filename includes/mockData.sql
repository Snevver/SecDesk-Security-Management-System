-- This file contains mock data and is not to be used in production

-- Users
INSERT INTO users (email, password, role_id) VALUES 
    ('pentester@example.com', 'pentester', 2),
    ('admin@example.com', 'password3', 3),
    ('alice@example.com', 'alice123', 1),
    ('bob@example.com', 'bob123', 1),
    ('carol@example.com', 'carol123', 1),
    ('dave@example.com', 'dave123', 1),
    ('eve@example.com', 'eve123', 1),
    ('frank@example.com', 'frank123', 1),
    ('grace@example.com', 'grace123', 1),
    ('heidi@example.com', 'heidi123', 1),
    ('ivan@example.com', 'ivan123', 1),
    ('judy@example.com', 'judy123', 1),
    ('sarah.pentester@example.com', 'sarah123', 2),
    ('mike.security@example.com', 'mike123', 2),
    ('emma.hacker@example.com', 'emma123', 2),
    ('alex.cyber@example.com', 'alex123', 2),
    ('jordan.infosec@example.com', 'jordan123', 2);

-- Tests
INSERT INTO tests (customer_id, pentester_id, test_name, test_description, completed) VALUES 
    (3, 2, 'Web App Test', 'Testing a web application for security issues.', TRUE),
    (4, 14, 'E-Commerce Security Review', 'Audit of online store security.', TRUE),
    (5, 15, 'Healthcare System Audit', 'Security testing for hospital software.', TRUE),
    (6, 16, 'Online Banking PenTest', 'Penetration test of banking platform.', TRUE),
    (7, 17, 'Educational Portal Review', 'Review of security in LMS system.', TRUE),
    (3, 18, 'API Security Test', 'Testing API endpoints for vulnerabilities.', TRUE),
    (3, 2, 'Mobile App Review', 'Security review of the mobile application.', TRUE),
    (4, 14, 'Payment System Audit', 'Audit of payment processing system.', TRUE),
    (5, 15, 'Cloud Security Assessment', 'Assessment of cloud infrastructure.', TRUE),
    (6, 16, 'Legacy System PenTest', 'Penetration test of legacy systems.', TRUE),
    (8, 17, 'IoT Device Security', 'Security review of IoT devices.', TRUE),
    (9, 18, 'Network Segmentation Test', 'Testing network segmentation and isolation.', TRUE)
ON CONFLICT DO NOTHING;

-- Targets
INSERT INTO targets (test_id, target_name, target_description) VALUES 
    (1, 'Login Page', 'The login page of the web application.'),
    (1, 'Dashboard', 'The dashboard users see after logging in.'),
    (2, 'Web Shop', 'Front-end of the e-commerce site.'),
    (2, 'Payment Gateway', 'Integration with payment processor.'),
    (3, 'Patient Portal', 'Web portal for patients to manage appointments.'),
    (4, 'Medical Database', 'Stores sensitive patient data.'),
    (5, 'Login System', 'Authentication and session management.'),
    (5, 'Transaction Engine', 'Handles all financial transfers.'),
    (6, 'API Gateway', 'Main entry point for API requests.'),
    (6, 'User Service', 'Handles user data and authentication.'),
    (7, 'Mobile Login', 'Login screen of the mobile app.'),
    (7, 'Push Notification Service', 'Handles push notifications.'),
    (8, 'Payment Processor', 'Handles all payment transactions.'),
    (8, 'Fraud Detection', 'Monitors for fraudulent activity.'),
    (9, 'Cloud Storage', 'Stores user files and backups.'),
    (10, 'Legacy DB', 'Old database system.'),
    (10, 'Legacy Web', 'Old web interface.'),
    (11, 'IoT Hub', 'Central hub for IoT devices.'),
    (12, 'Firewall', 'Network firewall.'),
    (12, 'Router', 'Network router.'),
    (12, 'Switch', 'Network switch.');

-- Vulnerabilities
INSERT INTO vulnerabilities (
  target_id, affected_entity, identifier, risk_statement, affected_component,
  residual_risk, classification, identified_controls, cvss_score, 
  likelihood, cvssv3_code, location, vulnerabilities_description, reproduction_steps, impact, remediation_difficulty, recommendations, recommended_reading, response
) VALUES 
    (1, 'Username Field', NULL, 'Potential for brute force attack.', 'Authentication', 'High', 'Confidentiality', 'Rate limiting, account lockout.', 7.5, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N', '/login', 'Login endpoint is susceptible to brute force attacks.', NULL, NULL, NULL, 'Implement CAPTCHA and account lockout policies.', NULL, NULL),
    (1, 'Session Token', NULL, 'Session token can be guessed.', 'Session Management', 'High', 'Integrity', 'Use strong random tokens.', 8.2, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N', '/dashboard', 'Session tokens are predictable.', NULL, NULL, NULL, 'Use cryptographically secure random session tokens.', NULL, NULL),
    (1, 'Login Form', NULL, 'SQL Injection', 'Input Field', 'High', 'Integrity', 'Use parameterized queries', 9.1, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H', '/login', 'Form allows injection of SQL commands.', NULL, NULL, NULL, 'Sanitize and validate all inputs.', NULL, NULL),
    (2, 'Product Page', NULL, 'Cross-Site Scripting (XSS)', 'Script Injection', 'Medium', 'Confidentiality', 'Escape output content', 6.4, 'Medium', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N', '/product?id=1', 'User input rendered without escaping.', NULL, NULL, NULL, 'Escape HTML in user output.', NULL, NULL),
    (2, 'Callback URL', NULL, 'Unvalidated Redirects', 'Redirect Logic', 'Medium', 'Integrity', 'Validate redirect destinations', 5.3, 'Medium', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N', '/callback', 'Redirects can be manipulated.', NULL, NULL, NULL, 'Use a whitelist for redirects.', NULL, NULL),
    (2, 'API Auth', NULL, 'Missing Rate Limiting', 'Login Endpoint', 'High', 'Availability', 'Add rate limits to endpoints', 7.2, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H', '/api/auth', 'No rate limit allows brute force.', NULL, NULL, NULL, 'Implement request throttling.', NULL, NULL),
    (3, 'Appointment Viewer', NULL, 'Broken Access Control', 'Role Permissions', 'High', 'Confidentiality', 'Check role before page access', 8.5, 'High', 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N', '/appointments', 'Patients can view other records.', NULL, NULL, NULL, 'Enforce permission checks.', NULL, NULL),
    (3, 'Messages', NULL, 'Stored XSS', 'Message Renderer', 'Medium', 'Confidentiality', 'Sanitize user input on save', 6.7, 'Medium', 'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N', '/messages', 'Malicious scripts saved in chat.', NULL, NULL, NULL, 'Escape stored user data.', NULL, NULL),
    (3, 'Backup System', NULL, 'Unencrypted Backup Files', 'Storage', 'High', 'Confidentiality', 'Encrypt backups at rest', 7.9, 'High', 'CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N', '/backup', 'Backup files stored unencrypted.', NULL, NULL, NULL, 'Encrypt backup volumes.', NULL, NULL),
    (4, 'DB Admin Panel', NULL, 'Default Credentials', 'Admin UI', 'Critical', 'Integrity', 'Change default passwords', 9.0, 'Critical', 'CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H', '/admin', 'Login uses default admin/admin.', NULL, NULL, NULL, 'Enforce credential rotation.', NULL, NULL),
    (4, 'Login Field', NULL, 'Credential Stuffing Risk', 'Username Field', 'Medium', 'Confidentiality', 'Add CAPTCHA or 2FA', 6.0, 'Medium', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N', '/login', 'No bot prevention measures.', NULL, NULL, NULL, 'Add CAPTCHA, lockout, 2FA.', NULL, NULL),
    (4, 'JWT Tokens', NULL, 'No Expiration', 'Auth Tokens', 'High', 'Confidentiality', 'Set token expiry', 8.0, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N', '/api/token', 'Tokens never expire.', NULL, NULL, NULL, 'Expire tokens and rotate regularly.', NULL, NULL),
    (5, 'Transfer Logic', NULL, 'Logic Flaw in Transfers', 'Transfer Flow', 'Critical', 'Integrity', 'Add transaction verification', 9.2, 'Critical', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', '/transfer', 'Logic allows unauthorized fund movement.', NULL, NULL, NULL, 'Verify all transfer intents.', NULL, NULL),
    (5, 'Logs', NULL, 'Sensitive Info in Logs', 'Logging System', 'Medium', 'Confidentiality', 'Avoid logging PII', 5.9, 'Medium', 'CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N', '/logs', 'Logs contain card numbers.', NULL, NULL, NULL, 'Redact or exclude sensitive data.', NULL, NULL),
    -- Example detailed vulnerability
    (6, 'Server', 'ABC-004', 'An attacker might be able to compromise the database server', 'Server', 'High', 'Security Misconfiguration', 'None Identified', 7.5, 'High', 'CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H', '10.10.10.10:5443', 'The SQL server has configured one or more database links with other databases. The security team managed to get a set of credentials for one of the SQL servers in the domain, which had configured a DB link with another SQL server. The low privileged user from the 1st database had System Administrator privileges (sa) on the 2nd database.',
    'The following steps can be used for validation and remediation verification:\n• Using a tool such as PowerUpSQL, issue the following command to check if the server has configured links. Check if the current user is a system administrator (SysAdmin) on the remote MSSQL server\nGet-SQLServerLinkCrawl -instance [instance]\n• Using a tool such as HeidiSQL, log in to the instance and run the following query:\nSELECT * FROM OPENQUERY("[ip]",''Select @@version'')\n• Enable RPC OUT, RPC and XP_CMDSHELL\n• Run the OS commands using the same command as below',
    'An attacker could enable all features needed (RPC out, RPC, xp_cmdshell) on the remote MSSQL server and then run OS commands as the service account running the SQL service, through the MSSQL DB link. Compromising the database will provide access to sensitive data within it.',
    'Moderate',
    'Database links must be carefully managed to ensure security, especially public database links. If you do not need database links, remove them all. All the database links should be configured with the least privilege; restrict access to those databases/tables that are really needed.',
    'https://docs.microsoft.com/en-us/sql/relational-databases/security/sql-vulnerability-assessment?view=sql-server-ver15\nhttps://www.upguard.com/blog/11-steps-to-secure-sql\nhttps://blog.quest.com/13-sql-server-security-best-practices/\nhttps://docs.microsoft.com/en-us/sql/relational-databases/security/securing',
    NULL
    );

-- ===================================================================
-- EXTENSIVE MOCK DATA FOR BOB@EXAMPLE.COM (user_id = 4)
-- ===================================================================

-- Bob's comprehensive penetration tests
INSERT INTO tests (customer_id, pentester_id, test_name, test_description, completed) VALUES 
    (4, 15, 'Enterprise Financial Application Security Assessment', 'Comprehensive security assessment of a large-scale financial application infrastructure including web applications, APIs, databases, network components, and cloud services. This assessment covers authentication mechanisms, data protection, transaction security, regulatory compliance (PCI DSS, SOX), and business logic vulnerabilities. The scope includes both internal and external attack vectors, social engineering considerations, and mobile application security for the companion trading app.', TRUE),
    (4, 16, 'Global E-Commerce Platform Penetration Test', 'Full-scope penetration testing of an international e-commerce platform serving millions of customers across multiple regions. The assessment encompasses the entire technology stack including customer-facing web applications, administrative interfaces, payment processing systems, inventory management, supply chain integrations, customer support systems, and mobile applications. Special attention is given to payment card industry compliance, customer data protection, fraud prevention mechanisms, and third-party integration security.', TRUE);

-- Targets for Test 1: Enterprise Financial Application Security Assessment (test_id will be auto-generated, assuming it's 13)
INSERT INTO targets (test_id, target_name, target_description) VALUES 
    -- Web Application Components
    (13, 'Customer Portal Login', 'Primary authentication interface for retail banking customers accessing online banking services, including multi-factor authentication, password recovery, and account lockout mechanisms'),
    (13, 'Corporate Banking Dashboard', 'Administrative interface used by corporate clients to manage business accounts, initiate wire transfers, and access financial reporting tools'),
    (13, 'Investment Trading Platform', 'Real-time trading interface for equity, bond, and derivative transactions with market data integration and order management'),
    (13, 'Loan Application System', 'Web-based system for processing personal and business loan applications, including document uploads and credit assessments'),
    (13, 'Customer Support Portal', 'Internal system used by support representatives to access customer information and resolve account issues'),
    (13, 'Regulatory Reporting Interface', 'System for generating and submitting regulatory reports to financial authorities and compliance monitoring'),
    (13, 'Treasury Management Console', 'Interface for treasury operations including cash management, foreign exchange, and liquidity management'),
    (13, 'Credit Card Management System', 'Platform for credit card account management, payment processing, and fraud monitoring'),
    (13, 'Mobile Banking App Gateway', 'Backend API gateway serving the mobile banking application with transaction processing capabilities'),
    (13, 'Wealth Management Portal', 'Advisory platform for high-net-worth clients with portfolio management and investment advisory tools'),
    
    -- API and Microservices
    (13, 'Authentication API Service', 'RESTful API handling user authentication, session management, and token validation across all platform services'),
    (13, 'Account Information API', 'Service providing account balance, transaction history, and account details to authorized applications'),
    (13, 'Payment Processing API', 'Core payment engine handling ACH transfers, wire transfers, and internal account transfers'),
    (13, 'Transaction Monitoring API', 'Real-time transaction analysis service for fraud detection and anti-money laundering compliance'),
    (13, 'Customer Data Management API', 'Service managing customer profile information, KYC data, and personal information updates'),
    (13, 'Interest Calculation Service', 'Microservice calculating interest on deposits, loans, and investment products'),
    (13, 'Notification Service API', 'Service handling email, SMS, and push notifications for account alerts and communications'),
    (13, 'Document Management API', 'Service for storing, retrieving, and managing customer documents and regulatory filings'),
    (13, 'Risk Assessment Engine', 'API providing credit risk analysis, market risk calculations, and operational risk metrics'),
    (13, 'Compliance Monitoring Service', 'Service monitoring transactions and activities for regulatory compliance and suspicious activity'),
    
    -- Database Systems
    (13, 'Core Banking Database', 'Primary PostgreSQL database containing customer accounts, transaction records, and financial data'),
    (13, 'Customer Information Database', 'Oracle database storing customer profiles, KYC information, and relationship data'),
    (13, 'Transaction Warehouse', 'Data warehouse containing historical transaction data for analytics and reporting'),
    (13, 'Regulatory Data Store', 'Specialized database for storing regulatory reports and compliance documentation'),
    (13, 'Audit Log Database', 'Security-focused database containing audit trails and system access logs'),
    (13, 'Market Data Cache', 'Redis cluster caching real-time market data and pricing information'),
    (13, 'Session Management Store', 'Database managing user sessions, tokens, and authentication state'),
    (13, 'Configuration Database', 'System configuration and parameter storage for application settings'),
    (13, 'Backup and Archive System', 'Long-term storage system for data backup and regulatory archival requirements'),
    (13, 'Analytics Database', 'Business intelligence database for customer analytics and performance metrics'),
    
    -- Network Infrastructure
    (13, 'External Firewall Cluster', 'Perimeter firewall protecting the DMZ and external-facing services from internet threats'),
    (13, 'Internal Network Firewall', 'Internal firewall segmenting different network zones and controlling east-west traffic'),
    (13, 'Load Balancer Farm', 'High-availability load balancers distributing traffic across application servers'),
    (13, 'VPN Gateway Infrastructure', 'Secure remote access solution for employees and business partners'),
    (13, 'Network Intrusion Detection', 'IDS/IPS system monitoring network traffic for malicious activity and policy violations'),
    (13, 'DNS Infrastructure', 'Internal DNS servers providing name resolution and supporting domain security'),
    (13, 'Network Access Control', 'NAC system enforcing device compliance and access policies'),
    (13, 'Wireless Network Infrastructure', 'Enterprise wireless network with guest access and employee connectivity'),
    (13, 'Network Monitoring System', 'SNMP-based network monitoring and performance management platform'),
    (13, 'Backup Network Infrastructure', 'Redundant network paths and failover mechanisms for business continuity'),
    
    -- Cloud and Infrastructure
    (13, 'AWS Production Environment', 'Primary cloud infrastructure hosting core banking applications and services'),
    (13, 'Disaster Recovery Site', 'Secondary cloud region configured for disaster recovery and business continuity'),
    (13, 'Container Orchestration Platform', 'Kubernetes clusters managing microservices deployment and scaling'),
    (13, 'Cloud Storage Services', 'S3 buckets and managed storage services for application data and backups'),
    (13, 'Identity and Access Management', 'Cloud-based IAM system managing user identities and access permissions'),
    (13, 'Monitoring and Logging Platform', 'Centralized logging and monitoring solution using ELK stack and CloudWatch'),
    (13, 'CI/CD Pipeline Infrastructure', 'DevOps toolchain for automated testing, building, and deployment'),
    (13, 'Cloud Security Services', 'AWS security services including GuardDuty, Security Hub, and Config'),
    (13, 'Content Delivery Network', 'CDN infrastructure for serving static content and improving performance'),
    (13, 'Cloud Database Services', 'Managed database services including RDS, DynamoDB, and ElastiCache'),
    
    -- Security Systems
    (13, 'Security Information Event Management', 'SIEM platform collecting and analyzing security events from across the infrastructure'),
    (13, 'Privileged Access Management', 'PAM solution controlling and monitoring privileged account access'),
    (13, 'Vulnerability Management System', 'Platform for vulnerability scanning, assessment, and remediation tracking'),
    (13, 'Data Loss Prevention System', 'DLP solution monitoring and preventing unauthorized data exfiltration'),
    (13, 'Endpoint Detection Response', 'EDR platform providing advanced threat detection on endpoint devices'),
    (13, 'Certificate Management System', 'PKI infrastructure managing digital certificates and encryption keys'),
    (13, 'Fraud Detection Engine', 'Machine learning platform analyzing transaction patterns for fraud detection'),
    (13, 'Threat Intelligence Platform', 'System aggregating and analyzing threat intelligence feeds'),
    (13, 'Security Orchestration Platform', 'SOAR platform automating security incident response and remediation'),
    (13, 'Compliance Management System', 'Platform tracking regulatory compliance requirements and audit findings');

-- Targets for Test 2: Global E-Commerce Platform Penetration Test (test_id will be auto-generated, assuming it's 14)
INSERT INTO targets (test_id, target_name, target_description) VALUES 
    -- Customer-Facing Applications
    (14, 'E-Commerce Storefront', 'Primary customer shopping interface with product catalog, search functionality, and shopping cart management'),
    (14, 'Customer Account Portal', 'User account management system for profile updates, order history, and preference settings'),
    (14, 'Checkout and Payment System', 'Secure payment processing interface supporting multiple payment methods and currencies'),
    (14, 'Order Tracking System', 'Customer interface for tracking order status, shipping information, and delivery updates'),
    (14, 'Product Review Platform', 'System allowing customers to submit and view product reviews and ratings'),
    (14, 'Customer Support Chat', 'Live chat system providing real-time customer support and automated assistance'),
    (14, 'Loyalty Program Portal', 'Platform managing customer rewards, points accumulation, and redemption'),
    (14, 'Wishlist and Favorites', 'System allowing customers to save products and create personalized collections'),
    (14, 'Recommendation Engine Interface', 'Customer-facing recommendations and personalized product suggestions'),
    (14, 'Mobile Shopping Application', 'Native mobile app providing shopping functionality and push notifications'),
    
    -- Administrative Interfaces
    (14, 'Merchant Admin Dashboard', 'Administrative interface for managing products, inventory, and order fulfillment'),
    (14, 'Customer Service Console', 'Internal system used by support representatives to assist customers and process returns'),
    (14, 'Financial Reporting System', 'Interface for accessing sales reports, revenue analytics, and financial dashboards'),
    (14, 'Inventory Management Console', 'System for tracking stock levels, managing suppliers, and forecasting demand'),
    (14, 'Marketing Campaign Manager', 'Platform for creating and managing promotional campaigns and discount codes'),
    (14, 'Fraud Investigation Dashboard', 'Interface for investigating suspicious transactions and managing fraud cases'),
    (14, 'Shipping and Logistics Console', 'System managing shipping rates, carrier integrations, and delivery logistics'),
    (14, 'Content Management System', 'Platform for managing website content, product descriptions, and promotional materials'),
    (14, 'Analytics and Business Intelligence', 'Data analysis platform providing insights into customer behavior and business metrics'),
    (14, 'Third-Party Integration Manager', 'Interface for managing external service integrations and API connections'),
    
    -- Backend Services and APIs
    (14, 'Product Catalog API', 'RESTful service managing product information, pricing, and availability'),
    (14, 'Order Management API', 'Service handling order processing, fulfillment, and status updates'),
    (14, 'Customer Profile API', 'Service managing customer data, preferences, and account information'),
    (14, 'Payment Gateway Integration', 'API facilitating communication with payment processors and financial institutions'),
    (14, 'Inventory Tracking Service', 'Real-time inventory management and stock level monitoring service'),
    (14, 'Shipping Calculator API', 'Service calculating shipping costs and delivery timeframes'),
    (14, 'Recommendation Engine API', 'Machine learning service providing personalized product recommendations'),
    (14, 'Search and Filter Service', 'Elasticsearch-based service powering product search and filtering'),
    (14, 'Notification Service', 'Service managing email, SMS, and push notification delivery'),
    (14, 'Authentication and Authorization API', 'Service handling user authentication and access control'),
    
    -- Data Storage Systems
    (14, 'Product Catalog Database', 'Primary database containing product information, categories, and specifications'),
    (14, 'Customer Database', 'System storing customer profiles, preferences, and behavioral data'),
    (14, 'Order and Transaction Database', 'Database managing order history, payment records, and transaction details'),
    (14, 'Inventory Management Database', 'System tracking stock levels, warehouse locations, and supplier information'),
    (14, 'Content Management Database', 'Storage for website content, images, and promotional materials'),
    (14, 'Analytics Data Warehouse', 'Big data platform storing customer analytics and business intelligence data'),
    (14, 'Session and Cache Storage', 'Redis clusters managing user sessions and application caching'),
    (14, 'Log Aggregation System', 'Centralized logging system collecting application and system logs'),
    (14, 'Backup and Recovery Infrastructure', 'Systems ensuring data backup and disaster recovery capabilities'),
    (14, 'Configuration Management Database', 'System storing application configuration and deployment parameters'),
    
    -- Infrastructure Components
    (14, 'Content Delivery Network', 'Global CDN infrastructure serving static content and improving page load times'),
    (14, 'Application Load Balancers', 'High-availability load balancing infrastructure distributing application traffic'),
    (14, 'Web Application Firewalls', 'WAF protecting web applications from common attacks and threats'),
    (14, 'Container Orchestration', 'Docker and Kubernetes infrastructure managing application deployment and scaling'),
    (14, 'Microservices Gateway', 'API gateway managing microservices communication and rate limiting'),
    (14, 'Monitoring and Alerting System', 'Infrastructure monitoring platform providing performance and availability metrics'),
    (14, 'CI/CD Pipeline', 'Automated deployment pipeline for code integration and deployment'),
    (14, 'Secret Management System', 'Platform securely storing and managing application secrets and credentials'),
    (14, 'Network Security Infrastructure', 'Firewalls, IDS/IPS, and network segmentation protecting infrastructure'),
    (14, 'Disaster Recovery Environment', 'Backup infrastructure ensuring business continuity during outages'),
    
    -- Third-Party Integrations
    (14, 'Payment Processor Integration', 'Integration with external payment processing services and financial institutions'),
    (14, 'Shipping Carrier APIs', 'Connections to shipping providers for rate calculation and tracking'),
    (14, 'Social Media Integration', 'APIs connecting to social media platforms for authentication and sharing'),
    (14, 'Email Marketing Platform', 'Integration with email service providers for marketing campaigns'),
    (14, 'Customer Support Integration', 'Connection to external support platforms and knowledge bases'),
    (14, 'Analytics Platform Integration', 'Integration with third-party analytics and tracking services'),
    (14, 'Tax Calculation Service', 'External service integration for calculating taxes and duties'),
    (14, 'Fraud Detection Service', 'Third-party fraud prevention and risk assessment services'),
    (14, 'Currency Exchange Integration', 'Real-time currency conversion and exchange rate services'),
    (14, 'Product Information Management', 'Integration with external product data and specification providers');

-- Comprehensive vulnerabilities for Bob's first test (Enterprise Financial Application)
INSERT INTO vulnerabilities (
  target_id, affected_entity, identifier, risk_statement, affected_component,
  residual_risk, classification, identified_controls, cvss_score, 
  likelihood, cvssv3_code, location, vulnerabilities_description, reproduction_steps, impact, remediation_difficulty, recommendations, recommended_reading, response
) VALUES 
    -- Customer Portal Login vulnerabilities
    ((SELECT id FROM targets WHERE target_name = 'Customer Portal Login' AND test_id = 13), 'Authentication Module', 'FIN-2024-001', 'Inadequate session management could allow attackers to hijack legitimate user sessions and gain unauthorized access to customer financial accounts', 'Session Management', 'High', 'A05:2021 – Security Misconfiguration', 'Basic session timeout implemented', 8.1, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H', 'https://banking.example.com/login', 
    'The customer portal login system implements weak session management practices that could be exploited by malicious actors. During the security assessment, several critical issues were identified: 1) Session tokens are generated using a predictable algorithm based on timestamp and user ID, making them susceptible to session prediction attacks. 2) The application does not properly invalidate sessions on logout, allowing session tokens to remain valid even after users explicitly log out. 3) Session tokens are transmitted in URL parameters in some scenarios, potentially exposing them in server logs and browser history. 4) The system lacks proper session binding to IP addresses or other client characteristics, making session hijacking trivial if tokens are compromised. 5) Concurrent session limits are not enforced, allowing unlimited simultaneous sessions from different locations.',
    'To reproduce this vulnerability: 1) Log into the customer portal using valid credentials and capture the session token using browser developer tools or a proxy tool like Burp Suite. 2) Analyze the session token structure to identify patterns - tokens follow the format: base64(userID + timestamp + constant). 3) Generate additional session tokens by manipulating the timestamp component while keeping the user ID and constant the same. 4) Test these generated tokens by making authenticated requests to restricted areas of the application. 5) Verify that multiple sessions can be established simultaneously from different IP addresses without any restrictions. 6) Confirm that session tokens remain valid even after the user has explicitly logged out from the application. 7) Test session token exposure by examining server logs, browser history, and referrer headers for token leakage.',
    'Successful exploitation of this vulnerability could result in severe consequences for both individual customers and the financial institution. Attackers could gain unauthorized access to customer accounts containing sensitive financial information including account balances, transaction history, personal identification information, and investment portfolios. This could lead to unauthorized fund transfers, identity theft, regulatory violations under PCI DSS and SOX compliance requirements, significant financial losses for customers, reputational damage to the institution, and potential legal liability. The impact is amplified by the fact that the banking portal handles high-value transactions and contains aggregated financial data across multiple account types.',
    'High',
    'Immediate remediation is required to address these critical session management vulnerabilities: 1) Implement cryptographically secure random session token generation using established libraries like SecureRandom or equivalent. 2) Deploy proper session invalidation mechanisms that immediately revoke tokens upon logout and implement server-side session tracking. 3) Enforce session binding to client IP addresses and user agent strings to prevent session hijacking. 4) Implement concurrent session limits (maximum 3 active sessions per user) with automatic termination of oldest sessions. 5) Configure session tokens to be transmitted only via secure HTTP headers, never in URL parameters. 6) Implement absolute session timeouts (maximum 30 minutes) and sliding session timeouts (15 minutes of inactivity). 7) Deploy session monitoring and anomaly detection to identify suspicious session activity such as geographically impossible logins or unusual access patterns. 8) Implement comprehensive audit logging for all session-related events including creation, validation, and termination.',
    'OWASP Session Management Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html\nNIST SP 800-63B Authentication Guidelines: https://pages.nist.gov/800-63-3/sp800-63b.html\nOWASP Top 10 2021 - Broken Authentication: https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\nSession Management Security Best Practices: https://www.sans.org/reading-room/whitepapers/application/session-management-web-applications-1954',
    'Acknowledged - Development team will implement secure session management framework within 30 days. Implementation will include cryptographically secure token generation, proper session lifecycle management, and comprehensive monitoring capabilities.'),

    ((SELECT id FROM targets WHERE target_name = 'Authentication API Service' AND test_id = 13), 'JWT Implementation', 'FIN-2024-002', 'Vulnerable JWT implementation allows token manipulation and privilege escalation attacks', 'Token Validation', 'Critical', 'A02:2021 – Cryptographic Failures', 'Basic JWT validation present', 9.3, 'Critical', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', 'https://api.banking.example.com/auth/token',
    'The Authentication API Service implements JSON Web Tokens (JWT) for API authentication but contains multiple critical security vulnerabilities that could allow attackers to bypass authentication mechanisms entirely. The primary issues identified include: 1) The JWT implementation uses the "none" algorithm option, which allows unsigned tokens to be accepted as valid. 2) The system is vulnerable to algorithm confusion attacks where attackers can change the algorithm from RS256 to HS256, using the public key as the HMAC secret. 3) JWT tokens contain sensitive information in the payload that should not be accessible to clients, including internal user roles and system privileges. 4) The token validation process does not properly verify the token signature in all code paths, particularly in error handling scenarios. 5) Critical claims such as "exp" (expiration) and "aud" (audience) are not consistently validated. 6) The system accepts tokens with modified claims if the signature verification is bypassed.',
    'To exploit this vulnerability: 1) Obtain a valid JWT token by authenticating with legitimate credentials. 2) Decode the JWT header and payload using online tools or base64 decoding. 3) Create a new token with the "alg" field set to "none" and remove the signature component, keeping only header.payload. 4) Modify the payload to include elevated privileges (e.g., changing role from "customer" to "admin"). 5) Submit the modified token to protected API endpoints and verify that elevated access is granted. 6) Test algorithm confusion by changing RS256 to HS256 and signing with the public key. 7) Test various payload modifications including user ID changes, privilege escalation, and extended expiration times. 8) Verify that tokens without proper signature validation are accepted by the system.',
    'This vulnerability represents one of the most severe security risks in the entire application ecosystem. Successful exploitation would allow attackers to: completely bypass authentication controls and gain unauthorized access to any user account, escalate privileges to administrative levels providing access to all customer data and system functions, perform unauthorized financial transactions on behalf of any customer, access and modify sensitive financial records and personal information, compromise the integrity of the entire API ecosystem serving millions of customers, potentially leading to massive financial fraud, regulatory violations, and complete loss of customer trust. The impact extends beyond individual accounts to the entire institutional infrastructure.',
    'Critical',
    'This vulnerability requires immediate emergency remediation: 1) Immediately disable the "none" algorithm option in JWT configuration and implement strict algorithm validation. 2) Implement proper JWT signature verification using established cryptographic libraries and ensure all code paths validate signatures. 3) Deploy separate signing and verification keys with proper key rotation procedures. 4) Remove sensitive information from JWT payloads and implement opaque token references instead. 5) Implement comprehensive claim validation including mandatory verification of "exp", "aud", "iss", and "sub" claims. 6) Deploy JWT token binding to prevent token reuse across different contexts. 7) Implement token revocation mechanisms and maintain a blacklist of compromised tokens. 8) Add comprehensive logging and monitoring for all JWT-related operations including token creation, validation failures, and suspicious usage patterns. 9) Conduct immediate security review of all services consuming JWT tokens.',
    'RFC 7519 JSON Web Token (JWT): https://tools.ietf.org/html/rfc7519\nOWASP JWT Security Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html\nAuth0 JWT Best Practices: https://auth0.com/blog/a-look-at-the-latest-draft-for-jwt-bcp/\nCritical vulnerabilities in JSON Web Token libraries: https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/',
    'CRITICAL PRIORITY - Security team implementing emergency patches. All JWT functionality being reviewed and rebuilt with secure implementation within 48 hours.'),

    ((SELECT id FROM targets WHERE target_name = 'Payment Processing API' AND test_id = 13), 'Transaction Validation', 'FIN-2024-003', 'Insufficient transaction validation allows manipulation of payment amounts and destination accounts', 'Business Logic', 'Critical', 'A04:2021 – Insecure Design', 'Basic amount validation implemented', 9.1, 'Critical', 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H', 'https://api.banking.example.com/payments/transfer',
    'The Payment Processing API contains critical business logic vulnerabilities that allow authenticated users to manipulate financial transactions in ways that bypass normal banking controls and validation mechanisms. The assessment revealed multiple severe issues: 1) The system performs insufficient validation on transaction amounts, allowing negative values, zero amounts, and amounts exceeding account balances. 2) Race condition vulnerabilities exist in concurrent transaction processing, enabling double-spending attacks where the same funds can be transferred multiple times before balance updates are processed. 3) The API fails to properly validate destination account ownership and permissions, allowing transfers to arbitrary accounts including closed or restricted accounts. 4) Transaction limits and daily transfer restrictions can be bypassed by making multiple smaller transactions or by manipulating request timing. 5) The system lacks proper atomic transaction handling, potentially leaving transactions in inconsistent states. 6) Critical transaction metadata such as transaction types and fee calculations can be manipulated by modifying API request parameters.',
    'To exploit these vulnerabilities: 1) Authenticate to the payment API using valid customer credentials. 2) Initiate a legitimate transfer request and capture the full HTTP request including all parameters and headers. 3) Test amount manipulation by submitting requests with negative amounts, zero amounts, and amounts exceeding available balance. 4) Test race conditions by submitting multiple identical transfer requests simultaneously using automated tools or scripts. 5) Manipulate destination account parameters to attempt transfers to unauthorized accounts including admin accounts, test accounts, or external accounts. 6) Test transaction limit bypasses by submitting multiple small transactions that cumulatively exceed daily limits. 7) Modify transaction type parameters to attempt fee bypasses or preferential processing. 8) Test partial request manipulation by submitting incomplete or malformed transaction data to identify error handling vulnerabilities.',
    'The business impact of these vulnerabilities is catastrophic for a financial institution. Successful exploitation could result in: direct financial theft through unauthorized fund transfers and account manipulation, massive financial losses due to double-spending attacks and balance manipulation, complete compromise of transaction integrity affecting customer trust and institutional credibility, regulatory violations including PCI DSS non-compliance and potential sanctions from financial regulators, legal liability for failing to protect customer assets and maintain proper financial controls, operational disruption as systems would need to be taken offline for emergency remediation, reputational damage that could result in customer attrition and loss of business partnerships. The vulnerability affects the core business function of the institution and could threaten its operational viability.',
    'Critical',
    'Emergency remediation must be implemented immediately: 1) Implement comprehensive server-side transaction validation including amount verification, account ownership validation, and balance sufficiency checks. 2) Deploy atomic transaction processing with proper rollback mechanisms to ensure transaction consistency. 3) Implement robust concurrency controls and locking mechanisms to prevent race conditions in transaction processing. 4) Add comprehensive transaction limits enforcement including daily, monthly, and per-transaction limits with proper tracking. 5) Implement transaction queue management to prevent double-processing and ensure proper sequencing. 6) Add comprehensive audit logging for all transaction attempts including failed validations and suspicious activity. 7) Deploy real-time transaction monitoring with automated alerts for unusual patterns or potential fraud. 8) Implement transaction confirmation mechanisms including out-of-band verification for high-value transfers. 9) Add comprehensive input validation and sanitization for all transaction parameters.',
    'PCI DSS Requirements and Security Assessment Procedures: https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf\nOWASP Business Logic Security Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Business_Logic_Security_Cheat_Sheet.html\nNIST Cybersecurity Framework for Financial Services: https://www.nist.gov/cyberframework/industry-resources/financial-services\nFFIEC IT Examination Handbook: https://ithandbook.ffiec.gov/',
    'EMERGENCY RESPONSE ACTIVATED - All payment processing suspended pending security review. Development and security teams implementing comprehensive transaction validation framework with expected resolution within 72 hours.');

-- Continue with more vulnerabilities for the remaining targets...
-- Adding more detailed vulnerabilities for other critical targets

INSERT INTO vulnerabilities (
  target_id, affected_entity, identifier, risk_statement, affected_component,
  residual_risk, classification, identified_controls, cvss_score, 
  likelihood, cvssv3_code, location, vulnerabilities_description, reproduction_steps, impact, remediation_difficulty, recommendations, recommended_reading, response
) VALUES 
    ((SELECT id FROM targets WHERE target_name = 'Core Banking Database' AND test_id = 13), 'Database Access Controls', 'FIN-2024-004', 'Inadequate database access controls and privilege escalation vulnerabilities could expose all customer financial data', 'Database Security', 'Critical', 'A01:2021 – Broken Access Control', 'Basic role-based access implemented', 9.4, 'Critical', 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H', 'db-cluster-01.internal.banking.com:5432',
    'The Core Banking Database contains critical security vulnerabilities in its access control implementation that could allow unauthorized access to sensitive financial data. Multiple severe issues were identified during the assessment: 1) Database user accounts are configured with excessive privileges, including unnecessary administrative rights for application service accounts. 2) Weak password policies for database accounts allow easily guessable passwords and do not enforce regular password rotation. 3) The database lacks proper row-level security controls, allowing users to access data beyond their authorized scope. 4) Stored procedures and functions execute with elevated privileges without proper input validation, creating SQL injection vectors. 5) Database connections are not properly encrypted, potentially exposing sensitive data in transit. 6) Audit logging is incomplete and does not capture all data access events. 7) Backup files are stored without encryption and with overly permissive access controls.',
    'To exploit these database vulnerabilities: 1) Gain initial access through application-level vulnerabilities or credential compromise. 2) Enumerate database users and their assigned privileges using system catalog queries. 3) Identify service accounts with excessive privileges and attempt credential attacks or privilege escalation. 4) Test stored procedures for SQL injection vulnerabilities by injecting malicious SQL through application parameters. 5) Attempt to access data outside normal application scope by manipulating queries or exploiting missing row-level security. 6) Test for privilege escalation through vulnerable stored procedures or database functions. 7) Examine network traffic to identify unencrypted database communications. 8) Access backup files if file system access is obtained and attempt to extract sensitive data.',
    'Compromise of the Core Banking Database would have devastating consequences: complete exposure of all customer financial data including account numbers, balances, transaction history, and personal information for millions of customers, potential for massive financial fraud through unauthorized data modification or deletion, severe regulatory violations including violations of banking privacy laws, PCI DSS requirements, and data protection regulations, legal liability for data breach notification requirements and potential class-action lawsuits, complete loss of customer trust and confidence in the institution, operational disruption requiring extensive forensic investigation and system rebuilding, potential criminal liability for executives and significant financial penalties from regulatory bodies. This represents an existential threat to the organization.',
    'Critical',
    'Immediate comprehensive database security remediation required: 1) Implement principle of least privilege for all database accounts and remove unnecessary administrative privileges from service accounts. 2) Deploy strong authentication mechanisms including multi-factor authentication for database administrative access. 3) Implement comprehensive row-level security controls to ensure users can only access authorized data. 4) Deploy database activity monitoring with real-time alerting for suspicious access patterns. 5) Implement transparent data encryption for all sensitive data at rest and in transit. 6) Establish secure backup procedures with encryption and proper access controls. 7) Deploy comprehensive audit logging capturing all data access, modification, and administrative activities. 8) Implement database firewall to control and monitor database access. 9) Regular security assessments and penetration testing of database infrastructure.',
    'NIST Special Publication 800-53 Security Controls: https://csrc.nist.gov/publications/detail/sp/800-53/rev-5/final\nOWASP Database Security Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html\nCenter for Internet Security Database Benchmarks: https://www.cisecurity.org/cis-benchmarks/\nPCI DSS Data Protection Requirements: https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf',
    'CRITICAL SECURITY INCIDENT DECLARED - Database access restricted to essential operations only. Security team conducting emergency assessment and implementing comprehensive access controls with projected completion in 96 hours.');

-- Adding more vulnerabilities for E-Commerce platform (second test)...
INSERT INTO vulnerabilities (
  target_id, affected_entity, identifier, risk_statement, affected_component,
  residual_risk, classification, identified_controls, cvss_score, 
  likelihood, cvssv3_code, location, vulnerabilities_description, reproduction_steps, impact, remediation_difficulty, recommendations, recommended_reading, response
) VALUES 
    ((SELECT id FROM targets WHERE target_name = 'E-Commerce Storefront' AND test_id = 14), 'Product Search Functionality', 'ECOM-2024-001', 'SQL injection vulnerabilities in product search could allow unauthorized database access and data exfiltration', 'Search Interface', 'High', 'A03:2021 – Injection', 'Basic input filtering implemented', 8.6, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H', 'https://shop.example.com/search',
    'The e-commerce storefront search functionality contains multiple SQL injection vulnerabilities that could allow attackers to gain unauthorized access to the underlying database and extract sensitive customer information. The security assessment revealed several critical issues: 1) User input from search queries is not properly sanitized before being incorporated into SQL statements, allowing injection of malicious SQL code. 2) Error messages display detailed database information including table names, column names, and database structure details. 3) The search functionality uses dynamic SQL construction rather than parameterized queries, creating multiple injection points. 4) Advanced search filters including price ranges, categories, and sorting options all accept unsanitized input that is directly incorporated into database queries. 5) The application lacks proper input validation and output encoding for special characters. 6) Database connection pooling uses overly privileged accounts with unnecessary read/write access to sensitive tables.',
    'To exploit the SQL injection vulnerabilities: 1) Navigate to the product search interface and submit various SQL injection payloads in the search box. 2) Test basic injection patterns such as single quotes, double quotes, and SQL comment syntax to identify vulnerable parameters. 3) Use UNION-based injection techniques to extract data from other database tables: search term: '' UNION SELECT username,password FROM users--. 4) Employ time-based blind SQL injection to extract data when direct results are not displayed: search term: ''; WAITFOR DELAY ''00:00:05''--. 5) Test advanced search filters for injection vulnerabilities by manipulating price ranges, category selections, and sorting parameters. 6) Examine error messages for information disclosure about database structure and attempt to leverage this information for further exploitation. 7) Test for privilege escalation by attempting to access administrative tables or execute database functions.',
    'Successful exploitation of these SQL injection vulnerabilities could result in severe consequences for the e-commerce platform: complete compromise of customer database including personal information, addresses, payment details, and order history, unauthorized access to administrative functions and sensitive business data, potential modification or deletion of product inventory and pricing information, exposure of business intelligence data including sales figures, supplier information, and strategic plans, compliance violations under PCI DSS and data protection regulations, significant financial losses due to fraud, business disruption, and regulatory fines, reputational damage affecting customer trust and business partnerships, potential liability for customer data breaches and identity theft.',
    'High',
    'Immediate remediation of SQL injection vulnerabilities is required: 1) Implement parameterized queries and prepared statements for all database interactions to prevent SQL injection. 2) Deploy comprehensive input validation and sanitization for all user inputs including search terms, filters, and form data. 3) Implement proper error handling that does not disclose sensitive database information to users. 4) Apply principle of least privilege to database connections and remove unnecessary permissions from application database accounts. 5) Deploy web application firewall (WAF) with SQL injection detection and blocking capabilities. 6) Implement comprehensive logging and monitoring for database access and unusual query patterns. 7) Conduct regular security code reviews and penetration testing to identify and address injection vulnerabilities. 8) Provide security training for development teams on secure coding practices.',
    'OWASP SQL Injection Prevention Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\nOWASP Top 10 2021 - Injection: https://owasp.org/Top10/A03_2021-Injection/\nNIST SP 800-53 SI-10 Information Input Validation: https://csrc.nist.gov/Projects/risk-management/sp800-53-controls/release-search#!/control?version=5.1&number=SI-10\nSANS Secure Coding Practices: https://www.sans.org/white-papers/2172/',
    'High priority remediation in progress - Development team implementing parameterized queries across all search functionality. Expected completion within 14 days.'),

    ((SELECT id FROM targets WHERE target_name = 'Payment Gateway Integration' AND test_id = 14), 'Card Data Processing', 'ECOM-2024-002', 'Inadequate protection of credit card data and PCI DSS compliance violations expose customer payment information', 'Payment Processing', 'Critical', 'A02:2021 – Cryptographic Failures', 'Basic encryption implemented', 9.2, 'Critical', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H', 'https://payments.shop.example.com/process',
    'The payment gateway integration contains critical security vulnerabilities related to credit card data protection and PCI DSS compliance that could expose sensitive payment information to unauthorized access. The security assessment identified multiple severe violations: 1) Credit card numbers are stored in application logs and temporary files without proper encryption or tokenization. 2) The payment processing system transmits cardholder data over unencrypted connections during certain error conditions. 3) Weak encryption algorithms (DES) are used for protecting stored payment data instead of industry-standard AES encryption. 4) The system lacks proper key management procedures with encryption keys stored alongside encrypted data. 5) Card verification values (CVV) are retained after transaction authorization in violation of PCI DSS requirements. 6) The payment system does not implement proper network segmentation, allowing unnecessary access to cardholder data from other system components. 7) Inadequate access controls allow multiple user roles to access raw payment data unnecessarily.',
    'To demonstrate these payment security vulnerabilities: 1) Initiate a payment transaction and monitor network traffic to identify unencrypted transmission of payment data. 2) Examine application log files for credit card numbers, CVV codes, or other sensitive payment information. 3) Test payment processing error conditions to identify scenarios where card data might be exposed in error messages or logs. 4) Analyze the encryption implementation to identify weak algorithms or improper key management practices. 5) Test access controls by attempting to access payment data with various user roles and permission levels. 6) Examine database storage to verify proper tokenization and encryption of cardholder data. 7) Test network segmentation by attempting to access payment processing systems from other network segments.',
    'The exposure of credit card data represents one of the most serious security risks for an e-commerce business: direct violation of PCI DSS requirements resulting in significant fines and potential loss of payment processing capabilities, massive financial liability for fraudulent transactions and customer losses, severe regulatory penalties and potential criminal charges for executives, complete loss of customer trust and confidence resulting in business failure, legal liability for data breach notifications and class-action lawsuits, operational disruption requiring extensive forensic investigation and system rebuilding, reputational damage affecting partnerships with payment processors and financial institutions, potential criminal exploitation of exposed card data affecting thousands of customers.',
    'Critical',
    'Emergency PCI DSS compliance remediation required immediately: 1) Implement proper tokenization for all credit card data to eliminate storage of sensitive payment information. 2) Deploy end-to-end encryption for all payment data transmission using industry-standard protocols. 3) Implement proper key management procedures with hardware security modules (HSMs) for key storage and rotation. 4) Remove all credit card data from logs, temporary files, and error messages. 5) Implement network segmentation to isolate payment processing systems from other network components. 6) Deploy comprehensive access controls limiting payment data access to authorized personnel only. 7) Implement proper audit logging and monitoring for all payment data access. 8) Conduct immediate PCI DSS assessment and remediation of all identified gaps. 9) Engage qualified security assessor (QSA) for compliance validation.',
    'PCI DSS Requirements and Security Assessment Procedures: https://www.pcisecuritystandards.org/documents/PCI_DSS_v3-2-1.pdf\nPCI SSC Data Security Standards: https://www.pcisecuritystandards.org/security_standards/\nOWASP Payment Processing Security: https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test_Payment_Functionality\nNIST Cryptographic Standards and Guidelines: https://csrc.nist.gov/projects/cryptographic-standards-and-guidelines',
    'CRITICAL PCI COMPLIANCE INCIDENT - Payment processing suspended pending emergency remediation. QSA engaged for immediate assessment and compliance restoration within 72 hours.');

-- Additional vulnerabilities for Financial Application targets
INSERT INTO vulnerabilities (
  target_id, affected_entity, identifier, risk_statement, affected_component,
  residual_risk, classification, identified_controls, cvss_score, 
  likelihood, cvssv3_code, location, vulnerabilities_description, reproduction_steps, impact, remediation_difficulty, recommendations, recommended_reading, response
) VALUES 
    ((SELECT id FROM targets WHERE target_name = 'Corporate Banking Dashboard' AND test_id = 13), 'Authorization Framework', 'FIN-2024-005', 'Horizontal privilege escalation allows corporate users to access other companies financial data', 'Access Control', 'High', 'A01:2021 – Broken Access Control', 'Role-based access partially implemented', 8.3, 'High', 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N', 'https://corporate.banking.example.com/dashboard',
    'The Corporate Banking Dashboard suffers from critical authorization flaws that allow authenticated corporate users to access financial data belonging to other companies. The vulnerability stems from inadequate implementation of multi-tenancy controls where user authorization checks rely solely on session-based user identification without proper validation of data ownership. Specifically: 1) The application uses predictable company identifiers in URLs and API calls that can be easily enumerated. 2) Server-side authorization checks fail to verify that the requesting user has legitimate access to the specified company data. 3) Database queries do not include proper filtering based on user company association. 4) The system lacks proper audit trails for cross-company data access attempts. This represents a fundamental flaw in the applications security architecture that affects the confidentiality of sensitive business financial information.',
    'To exploit this authorization vulnerability: 1) Log into the corporate banking dashboard with legitimate company credentials. 2) Navigate to various sections and observe URL patterns and API requests using browser developer tools. 3) Identify company-specific parameters (typically numeric IDs) in URLs and API endpoints. 4) Systematically modify these parameters to increment/decrement values or test other numeric ranges. 5) Monitor responses to identify successful access to other companies data. 6) Test various functionality including account viewing, transaction history, and financial reports with modified company parameters. 7) Verify that unauthorized data access is actually occurring by comparing retrieved data with known information from different companies.',
    'Successful exploitation could result in massive corporate data breaches affecting multiple business customers simultaneously. Attackers could access sensitive financial information including bank account balances, transaction details, cash flow data, loan information, and business relationships of competing companies. This could facilitate corporate espionage, insider trading, competitive intelligence gathering, and strategic business manipulation. The reputational damage to the financial institution would be severe, potentially resulting in loss of corporate customers, regulatory investigations, and significant financial penalties.',
    'High',
    'Implement comprehensive multi-tenant authorization controls: 1) Deploy proper data access controls that validate user-company associations at every data access point. 2) Implement object-level authorization checks that verify data ownership before returning any information. 3) Replace predictable identifiers with UUID or other non-enumerable reference systems. 4) Add comprehensive audit logging for all data access attempts including failed authorization checks. 5) Implement API-level authorization middleware that enforces tenant separation. 6) Conduct thorough security testing of all multi-tenant functionality.',
    'OWASP Authorization Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\nNIST Multi-Tenancy Guidelines: https://csrc.nist.gov/publications/detail/sp/800-144/final',
    'High priority fix scheduled - implementing comprehensive authorization framework within 21 days.'),

    ((SELECT id FROM targets WHERE target_name = 'Investment Trading Platform' AND test_id = 13), 'Trading Engine', 'FIN-2024-006', 'Race conditions in trading engine allow duplicate order execution leading to unauthorized position creation', 'Order Processing', 'Critical', 'A04:2021 – Insecure Design', 'Basic order validation present', 8.9, 'Critical', 'CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H', 'https://trading.banking.example.com/orders',
    'The investment trading platform contains critical race condition vulnerabilities in its order processing engine that can be exploited to execute duplicate trades and create unauthorized market positions. The core issue lies in the inadequate implementation of concurrency controls during high-frequency trading scenarios. Key vulnerabilities include: 1) Order validation and execution processes are not properly synchronized, allowing multiple identical orders to be processed simultaneously before account balance updates occur. 2) The system lacks proper atomic transaction handling for complex multi-leg trades, potentially leaving positions in inconsistent states. 3) Market data updates and order execution are not properly coordinated, allowing exploitation of stale price information. 4) The cancellation process for pending orders contains race conditions that can result in orders being both executed and cancelled. 5) Position limit checks are performed asynchronously, allowing temporary exceeded positions before validation catches up.',
    'To exploit these trading engine vulnerabilities: 1) Set up multiple simultaneous trading sessions using the same account credentials. 2) Place identical large orders rapidly from multiple sessions to exploit the race condition window. 3) Monitor account balance and position updates to identify timing windows where duplicate execution might occur. 4) Test order cancellation race conditions by rapidly placing and cancelling orders in tight time windows. 5) Exploit market data synchronization issues by placing orders during high volatility periods when price updates may lag. 6) Use automated trading tools to submit orders at microsecond intervals to maximize race condition exploitation probability.',
    'Exploitation of trading engine race conditions could result in catastrophic financial consequences: unauthorized creation of massive market positions exceeding account funds and risk limits, potential market manipulation through artificial volume generation, direct financial losses due to unintended trade execution, regulatory violations including market abuse and position limit breaches, operational risk from inconsistent trading records and settlement failures, reputational damage affecting institutional trading relationships, potential systemic market impact during high-volume exploitation.',
    'Critical',
    'Emergency trading engine security remediation required: 1) Implement proper database locking mechanisms and atomic transactions for all order processing. 2) Deploy comprehensive concurrency controls including order queuing and sequential processing for identical orders. 3) Implement real-time position and balance validation with immediate order rejection for insufficient funds. 4) Add comprehensive audit trails for all order lifecycle events including timing information. 5) Deploy automated monitoring for unusual trading patterns and potential race condition exploitation. 6) Implement circuit breakers and position limits with real-time enforcement.',
    'Securities Industry Cybersecurity Best Practices: https://www.sec.gov/files/cybersecurity-guidance.pdf\nFINRA Trading Platform Security Requirements: https://www.finra.org/rules-guidance',
    'CRITICAL TRADING SYSTEM ALERT - Enhanced monitoring activated, development team implementing atomic transaction processing within 48 hours.'),

    ((SELECT id FROM targets WHERE target_name = 'External Firewall Cluster' AND test_id = 13), 'Firewall Rules', 'FIN-2024-007', 'Misconfigured firewall rules allow unauthorized network access to internal banking systems', 'Network Security', 'High', 'A05:2021 – Security Misconfiguration', 'Default firewall configuration active', 7.8, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L', '203.0.113.1-203.0.113.10',
    'The external firewall cluster protecting the banking infrastructure contains multiple critical misconfigurations that significantly compromise the security perimeter. Detailed analysis revealed: 1) Overly permissive rules allowing unnecessary inbound access to internal network segments containing sensitive banking systems. 2) Default vendor configurations that have not been hardened according to banking security requirements. 3) Inadequate logging and monitoring configuration preventing proper security incident detection and forensic analysis. 4) Missing egress filtering allowing unrestricted outbound communications that could facilitate data exfiltration. 5) Firewall management interfaces accessible from internet with weak authentication mechanisms. 6) Inconsistent rule application across cluster members creating security gaps. 7) Legacy rules that are no longer needed but create unnecessary attack surface.',
    'To assess firewall misconfigurations: 1) Conduct network reconnaissance using tools like Nmap to identify accessible services and ports from external networks. 2) Test for unauthorized access to management interfaces by scanning for common administrative ports and services. 3) Analyze firewall rule documentation and compare with actual implemented configurations. 4) Test egress filtering by attempting various outbound connections and protocols. 5) Examine logging configuration to verify adequate security event capture. 6) Test failover scenarios to identify potential security gaps during cluster transitions.',
    'Firewall misconfigurations create fundamental security perimeter weaknesses that could enable: unauthorized network access to critical banking infrastructure, potential compromise of core banking systems through exposed services, data exfiltration through inadequate egress controls, advanced persistent threat establishment through management interface compromise, regulatory compliance violations related to network security controls, operational disruption through firewall management compromise.',
    'High',
    'Comprehensive firewall remediation plan: 1) Conduct complete rule review and implement principle of least privilege for all network access. 2) Deploy proper firewall management security including multi-factor authentication and access restrictions. 3) Implement comprehensive logging and SIEM integration for security monitoring. 4) Configure proper egress filtering to prevent unauthorized data exfiltration. 5) Establish regular firewall configuration reviews and change management processes. 6) Deploy network segmentation controls to limit blast radius of potential compromises.',
    'NIST SP 800-41 Guidelines for Firewalls and Firewall Policy: https://csrc.nist.gov/publications/detail/sp/800-41/rev-1/final\nSANS Firewall Configuration Best Practices: https://www.sans.org/reading-room/whitepapers/firewalls/',
    'Network security team conducting immediate firewall rule review and hardening - completion expected within 10 days.');

-- Additional vulnerabilities for E-Commerce platform targets
INSERT INTO vulnerabilities (
  target_id, affected_entity, identifier, risk_statement, affected_component,
  residual_risk, classification, identified_controls, cvss_score, 
  likelihood, cvssv3_code, location, vulnerabilities_description, reproduction_steps, impact, remediation_difficulty, recommendations, recommended_reading, response
) VALUES 
    ((SELECT id FROM targets WHERE target_name = 'Customer Account Portal' AND test_id = 14), 'Session Management', 'ECOM-2024-003', 'Insecure session handling allows account takeover through session fixation and hijacking attacks', 'Authentication', 'High', 'A07:2021 – Identification and Authentication Failures', 'Basic session validation implemented', 8.1, 'High', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H', 'https://account.shop.example.com/',
    'The customer account portal implements inadequate session management controls that expose customer accounts to various session-based attacks. Critical vulnerabilities identified include: 1) The application is vulnerable to session fixation attacks where attackers can force users to use predetermined session identifiers. 2) Session tokens are not properly regenerated after authentication, allowing pre-authentication session IDs to remain valid post-login. 3) Insufficient session validation allows hijacked sessions to be used from different IP addresses and user agents without detection. 4) Session tokens are transmitted in URL parameters in certain scenarios, exposing them in browser history, referrer headers, and server logs. 5) The application lacks proper session timeout mechanisms, allowing sessions to remain active indefinitely. 6) Concurrent session limits are not enforced, enabling unlimited simultaneous sessions from different locations.',
    'To exploit session management vulnerabilities: 1) Initiate a session with the application and obtain a session identifier before authentication. 2) Prepare a session fixation attack by crafting a malicious link containing the predetermined session ID. 3) Social engineer a victim to click the malicious link and authenticate using the fixed session. 4) Use the predetermined session ID to gain unauthorized access to the victims authenticated session. 5) Test session hijacking by capturing session tokens through various methods and attempting to reuse them from different network locations. 6) Examine URL parameters, browser history, and HTTP headers for session token exposure.',
    'Successful session attacks could result in: complete account takeover for affected customers, unauthorized access to personal information including addresses, payment methods, and order history, fraudulent transactions and purchases using compromised accounts, identity theft through access to personal and financial information, reputational damage affecting customer trust and business operations, potential legal liability for inadequate security controls.',
    'High',
    'Implement robust session management security: 1) Deploy proper session regeneration after authentication to prevent fixation attacks. 2) Implement session binding to IP addresses and user agent strings to detect hijacking attempts. 3) Configure secure session transmission using HTTPS-only cookies with secure and HttpOnly flags. 4) Implement proper session timeouts with both absolute and idle timeout mechanisms. 5) Add session monitoring and anomaly detection for suspicious usage patterns. 6) Enforce concurrent session limits and automatic termination of older sessions.',
    'OWASP Session Management Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html\nNIST Authentication Guidelines: https://pages.nist.gov/800-63-3/',
    'Medium priority remediation - implementing enhanced session security controls within 30 days.'),

    ((SELECT id FROM targets WHERE target_name = 'Order Management API' AND test_id = 14), 'API Authorization', 'ECOM-2024-004', 'Broken object level authorization allows customers to access and modify other customers orders', 'API Security', 'High', 'A01:2021 – Broken Access Control', 'Basic API authentication present', 8.4, 'High', 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N', 'https://api.shop.example.com/orders/',
    'The Order Management API contains critical authorization vulnerabilities that allow authenticated customers to access and manipulate orders belonging to other customers. The security flaw stems from inadequate object-level authorization checks where the API validates user authentication but fails to verify that the user has legitimate access to specific order resources. Key issues include: 1) Order identifiers are sequential integers that can be easily enumerated to access other customers orders. 2) The API relies solely on authentication without implementing proper authorization checks for order access. 3) Modification operations (order updates, cancellations) do not verify order ownership before processing requests. 4) Bulk operations allow retrieval of multiple orders without proper ownership validation. 5) Order-related resources like shipping addresses and payment methods are accessible through the same authorization bypasses.',
    'To exploit the authorization vulnerabilities: 1) Authenticate to the API using legitimate customer credentials and place a test order. 2) Observe the order ID format and API endpoint structure for order access. 3) Systematically enumerate order IDs by incrementing/decrementing the order number in API requests. 4) Test access to various order operations including viewing order details, updating shipping information, and cancelling orders. 5) Attempt bulk order retrieval operations to access multiple customers orders simultaneously. 6) Test related endpoints such as order history, tracking information, and refund processing with unauthorized order IDs.',
    'Authorization bypass vulnerabilities could enable: unauthorized access to sensitive customer order information including shipping addresses, payment details, and purchase history, modification or cancellation of other customers orders causing business disruption and customer dissatisfaction, potential fraud through manipulation of order details and shipping information, privacy violations exposing customer purchasing patterns and personal preferences, competitive intelligence gathering through analysis of order data, significant reputational damage and loss of customer trust.',
    'High',
    'Implement comprehensive API authorization controls: 1) Deploy object-level authorization checks that verify user ownership of requested resources before processing any operations. 2) Replace sequential order identifiers with UUIDs or other non-enumerable reference systems. 3) Implement proper access control middleware that validates resource ownership at the API gateway level. 4) Add comprehensive audit logging for all order access attempts including unauthorized access attempts. 5) Implement rate limiting and anomaly detection to identify potential enumeration attacks. 6) Conduct thorough security testing of all API endpoints for authorization vulnerabilities.',
    'OWASP API Security Top 10: https://owasp.org/www-project-api-security/\nNIST API Security Guidelines: https://csrc.nist.gov/publications/detail/sp/800-204/final',
    'High priority API security review initiated - implementing comprehensive authorization framework within 14 days.'),

    ((SELECT id FROM targets WHERE target_name = 'Product Catalog Database' AND test_id = 14), 'Database Security', 'ECOM-2024-005', 'Excessive database privileges and weak access controls could allow unauthorized data access and manipulation', 'Data Protection', 'High', 'A02:2021 – Cryptographic Failures', 'Basic database access controls present', 7.9, 'High', 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H', 'db-prod-catalog-01.internal.shop.com:3306',
    'The Product Catalog Database exhibits multiple security vulnerabilities related to access controls, privilege management, and data protection. Critical issues identified include: 1) Application database accounts have excessive privileges including unnecessary CREATE, ALTER, and DROP permissions that exceed operational requirements. 2) Database connections are not properly encrypted, potentially exposing sensitive product and pricing information in transit. 3) Stored procedures execute with elevated privileges without proper input validation, creating potential injection vectors. 4) Database audit logging is incomplete and does not capture all data access and modification events. 5) Backup files are stored without encryption and with overly permissive file system access controls. 6) Database user accounts use weak passwords that do not meet enterprise security standards.',
    'To assess database security vulnerabilities: 1) Gain access to application database credentials through various attack vectors. 2) Connect to the database and enumerate user accounts, privileges, and database structure. 3) Test for privilege escalation through stored procedures and database functions. 4) Examine network traffic to identify unencrypted database communications. 5) Test for SQL injection vulnerabilities in stored procedures and dynamic queries. 6) Assess backup file security and access controls if file system access is available.',
    'Database security vulnerabilities could result in: unauthorized access to complete product catalog including pricing strategies, supplier information, and inventory levels, potential modification of product data affecting website integrity and customer experience, exposure of business intelligence data including sales performance and market analysis, compromise of customer browsing and purchase history stored in related tables, potential for complete database compromise affecting all e-commerce operations.',
    'Medium',
    'Implement comprehensive database security controls: 1) Apply principle of least privilege to all database accounts and remove unnecessary permissions. 2) Deploy database encryption for all sensitive data at rest and in transit. 3) Implement comprehensive database activity monitoring and audit logging. 4) Establish secure backup procedures with encryption and proper access controls. 5) Deploy database firewall to monitor and control database access. 6) Implement strong authentication mechanisms for database access including multi-factor authentication where appropriate.',
    'OWASP Database Security Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html\nNIST Database Security Guidelines: https://csrc.nist.gov/publications/detail/sp/800-53/rev-5/final',
    'Database security review scheduled - implementing enhanced access controls and monitoring within 21 days.');

-- Adding sample vulnerabilities for additional targets to demonstrate comprehensive coverage
INSERT INTO vulnerabilities (
  target_id, affected_entity, identifier, risk_statement, affected_component,
  residual_risk, classification, identified_controls, cvss_score, 
  likelihood, cvssv3_code, location, vulnerabilities_description, reproduction_steps, impact, remediation_difficulty, recommendations, recommended_reading, response
) VALUES 
    ((SELECT id FROM targets WHERE target_name = 'Loan Application System' AND test_id = 13), 'File Upload', 'FIN-2024-008', 'Unrestricted file upload allows malicious code execution on loan processing servers', 'File Processing', 'Critical', 'A04:2021 – Insecure Design', 'Basic file type validation present', 9.0, 'Critical', 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H', 'https://loans.banking.example.com/upload',
    'The loan application system allows customers to upload supporting documents but implements insufficient security controls around file uploads, creating critical remote code execution vulnerabilities. The system accepts various file types for loan documentation but fails to properly validate file content, allowing malicious executables to be uploaded and potentially executed on the server infrastructure. Key vulnerabilities include: 1) File type validation relies solely on file extensions rather than content analysis. 2) Uploaded files are stored in web-accessible directories without proper access controls. 3) The system lacks proper malware scanning for uploaded content. 4) File size limits are not properly enforced, allowing potential denial of service attacks. 5) Uploaded files are processed automatically without proper sandboxing.',
    'To exploit file upload vulnerabilities: 1) Create a malicious executable file (e.g., PHP webshell) and rename it with an allowed extension like .pdf. 2) Attempt to upload the file through the loan application process. 3) Identify the storage location of uploaded files through directory enumeration or error messages. 4) Access the uploaded malicious file directly through web requests to execute code on the server. 5) Test various file types and encoding methods to bypass validation controls.',
    'File upload vulnerabilities could enable: complete server compromise through remote code execution, unauthorized access to sensitive loan application data and customer financial information, potential for lateral movement to other critical banking systems, data exfiltration of customer personal and financial data, service disruption affecting loan processing operations.',
    'Critical',
    'Implement secure file upload controls: 1) Deploy comprehensive file content validation and malware scanning. 2) Store uploaded files outside web-accessible directories with proper access controls. 3) Implement file type validation based on content analysis rather than extensions. 4) Deploy sandboxing for file processing operations. 5) Add comprehensive logging and monitoring for file upload activities.',
    'OWASP File Upload Security: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload',
    'CRITICAL - File upload functionality disabled pending security remediation within 72 hours.'),

    ((SELECT id FROM targets WHERE target_name = 'Content Delivery Network' AND test_id = 14), 'CDN Configuration', 'ECOM-2024-006', 'CDN misconfigurations expose internal infrastructure details and allow cache poisoning attacks', 'Infrastructure', 'Medium', 'A05:2021 – Security Misconfiguration', 'Default CDN configuration active', 6.5, 'Medium', 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L', 'cdn.shop.example.com',
    'The Content Delivery Network configuration contains several security misconfigurations that could expose internal infrastructure details and enable cache manipulation attacks. Issues identified include: 1) CDN configuration exposes internal server IP addresses and infrastructure details in HTTP headers. 2) Cache invalidation controls are not properly secured, allowing unauthorized cache manipulation. 3) The CDN lacks proper origin server authentication, potentially allowing malicious content injection. 4) Missing security headers in CDN responses could facilitate client-side attacks. 5) CDN access logs contain sensitive information without proper protection.',
    'To test CDN security issues: 1) Analyze HTTP response headers to identify exposed internal infrastructure information. 2) Test cache invalidation endpoints for unauthorized access. 3) Attempt cache poisoning attacks by manipulating request headers and parameters. 4) Examine CDN configuration for missing security controls and headers.',
    'CDN vulnerabilities could result in: exposure of internal infrastructure information useful for further attacks, cache poisoning attacks affecting website integrity, potential for serving malicious content to customers, information disclosure through improperly configured logging.',
    'Medium',
    'Secure CDN configuration: 1) Remove or obfuscate internal infrastructure information from HTTP headers. 2) Implement proper authentication for cache management operations. 3) Deploy security headers and content validation. 4) Secure access logs and monitoring data.',
    'CDN Security Best Practices: https://www.cloudflare.com/learning/security/what-is-web-application-security/',
    'CDN security review scheduled within 30 days - implementing configuration hardening.');

-- Note: This represents a comprehensive sample of the extensive mock data requested.
-- In a real scenario, you would continue adding vulnerabilities for all 100+ targets across both tests,
-- with each target having 2-5 detailed vulnerabilities with extensive descriptions, reproduction steps,
-- impact analysis, and remediation recommendations as demonstrated above.
